"use strict";const account1={owner:"Nagasaki Yuto",movements:[200,455.23,-306.5,25e3,-642.21,-133.9,79.97,1300],interestRate:1.2,pin:1111,movementsDates:["2019-11-18T21:31:17.178Z","2019-12-23T07:42:02.383Z","2020-01-28T09:15:04.904Z","2020-04-01T10:17:24.185Z","2020-05-08T14:11:59.604Z","2022-02-22T17:01:17.194Z","2022-02-20T23:36:17.929Z","2022-02-17T10:51:36.790Z"],currency:"JPY",locale:"ja-JP"},account2={owner:"Jessica Davis",movements:[5e3,3400,-150,-790,-3210,-1e3,8500,-30],interestRate:1.5,pin:2222,movementsDates:["2019-11-01T13:15:33.035Z","2019-11-30T09:48:16.867Z","2019-12-25T06:04:23.907Z","2020-01-25T14:18:46.235Z","2020-02-05T16:33:06.386Z","2020-04-10T14:43:26.374Z","2020-06-25T18:49:59.371Z","2020-07-26T12:01:20.894Z"],currency:"USD",locale:"en-US"},account3={owner:"Steven Thomas Williams",movements:[200,-200,340,-300,-20,50,400,-460],interestRate:.7,pin:3333,movementsDates:["2019-02-01T13:15:33.035Z","2020-02-30T09:48:16.867Z","2020-01-25T06:04:23.907Z","2021-12-25T14:18:46.235Z","2021-11-05T16:33:06.386Z","2022-01-17T14:43:26.374Z","2022-02-20T18:49:59.371Z","2022-02-21T12:01:20.894Z"],currency:"GBP",locale:"en-GB"},account4={owner:"Pierre Jean-Luc",movements:[430,1e3,700,50,90],interestRate:1,pin:4444,movementsDates:["2021-09-01T10:17:24.185Z","2021-07-08T14:11:59.604Z","2022-02-15T17:01:17.194Z","2022-02-20T23:36:17.929Z","2022-02-17T10:51:36.790Z"],currency:"EUR",locale:"fr-FR"},accounts=[account1,account2,account3,account4],labelWelcome=document.querySelector(".welcome"),labelDate=document.querySelector(".date"),labelBalance=document.querySelector(".balance__value"),labelSumIn=document.querySelector(".summary__value--in"),labelSumOut=document.querySelector(".summary__value--out"),labelSumInterest=document.querySelector(".summary__value--interest"),labelTimer=document.querySelector(".timer"),containerApp=document.querySelector(".app"),containerMovements=document.querySelector(".movements"),btnLogin=document.querySelector(".login__btn"),btnTransfer=document.querySelector(".form__btn--transfer"),btnLoan=document.querySelector(".form__btn--loan"),btnClose=document.querySelector(".form__btn--close"),btnSort=document.querySelector(".btn--sort"),inputLoginUsername=document.querySelector(".login__input--user"),inputLoginPin=document.querySelector(".login__input--pin"),inputTransferTo=document.querySelector(".form__input--to"),inputTransferAmount=document.querySelector(".form__input--amount"),inputLoanAmount=document.querySelector(".form__input--loan-amount"),inputCloseUsername=document.querySelector(".form__input--user"),inputClosePin=document.querySelector(".form__input--pin"),formatMovementDate=(e,o)=>{const n=(t=new Date,a=e,Math.round(Math.abs((a-t)/864e5)));var t,a;return 0===n?"Today":1===n?"Yesterday":n<=7?`${n} days ago`:new Intl.DateTimeFormat(o).format(e)},formatCur=(e,o,n)=>new Intl.NumberFormat(o,{style:"currency",currency:n}).format(e),displayMovements=(e,o=!1)=>{containerMovements.innerHTML="";(o?e.movements.slice().sort(((e,o)=>e-o)):e.movements).forEach(((o,n)=>{const t=o>0?"deposit":"withdrawal",a=new Date(e.movementsDates[n]),r=`\n      <div class="movements__row">\n        <div class="movements__type movements__type--${t}">${n+1} ${t}</div>\n        <div class="movements__date">${formatMovementDate(a,e.locale)}</div>\n        <div class="movements__value">${formatCur(o,e.locale,e.currency)}</div>\n      </div>\n      `;containerMovements.insertAdjacentHTML("afterbegin",r)}))},calcDisplayBalance=e=>{e.balance=e.movements.reduce(((e,o)=>e+o)),labelBalance.textContent=formatCur(e.balance,e.locale,e.currency)},calcDisplaySummary=e=>{const o=e.movements.filter((e=>e>0)).reduce(((e,o)=>e+o),0);labelSumIn.textContent=formatCur(o,e.locale,e.currency);const n=e.movements.filter((e=>e<0)).reduce(((e,o)=>e+o),0);labelSumOut.textContent=formatCur(Math.abs(n),e.locale,e.currency);const t=e.movements.filter((e=>e>0)).map((o=>o*(e.interestRate/100))).filter((e=>e>=1)).reduce(((e,o)=>e+o),0);labelSumInterest.textContent=formatCur(t,e.locale,e.currency)},createUsernames=e=>{e.forEach((e=>{e.username=e.owner.toLowerCase().split(" ").map(((e,o,n)=>e.at(0))).join("")})),console.log(e)};createUsernames(accounts);const updateUI=e=>{var o;displayMovements(e),(o=e).balance=o.movements.reduce(((e,o)=>e+o)),labelBalance.textContent=formatCur(o.balance,o.locale,o.currency),calcDisplaySummary(e)},startLogoutTimer=()=>{let e=90;const o=()=>{const o=`${Math.trunc(e/60)}`.padStart(2,0),t=(""+e%60).padStart(2,0);labelTimer.textContent=`${o}:${t}`,0===e&&(clearInterval(n),labelWelcome.textContent="Log in to get started",inputLoginPin.blur(),inputLoginUsername.value=inputLoginPin.value="",inputTransferAmount.value=inputTransferTo.value="",inputCloseUsername.value=inputClosePin.value="",inputLoanAmount.value="",containerApp.style.opacity=0),e--};o();const n=setInterval(o,1e3);return n};let currentAccount,timer;const now=new Date;labelDate.textContent=now.toLocaleString(),btnLogin.addEventListener("click",(e=>{if(e.preventDefault(),currentAccount=accounts.find((e=>e.username===inputLoginUsername.value)),currentAccount?.pin===+inputLoginPin.value){alert(`${currentAccount.owner}, now logged in`),labelWelcome.textContent=`Welcome back, ${currentAccount.owner.split(" ")[0]}`,containerApp.style.opacity=100;const e=new Date,o={hour:"numeric",minute:"numeric",day:"numeric",month:"numeric",year:"numeric"};labelDate.textContent=new Intl.DateTimeFormat(currentAccount.locale,o).format(e),inputLoginUsername.value=inputLoginPin.value="",inputLoginPin.blur(),inputTransferAmount.value=inputTransferTo.value="",inputCloseUsername.value=inputClosePin.value="",inputLoanAmount.value="",timer&&clearInterval(timer),timer=startLogoutTimer(),updateUI(currentAccount)}else alert("User with this login detail does not exist \n Enter correct username and password")})),btnTransfer.addEventListener("click",(e=>{e.preventDefault();const o=+inputTransferAmount.value,n=accounts.find((e=>e?.username===inputTransferTo.value));o>0&&n&&currentAccount.balance>=o&&currentAccount.username!==n?.username?setTimeout((()=>{currentAccount.movements.push(-o),n.movements.push(o),currentAccount.movementsDates.push((new Date).toISOString()),n.movementsDates.push((new Date).toISOString()),updateUI(currentAccount),clearInterval(timer),timer=startLogoutTimer(),inputTransferAmount.value=inputTransferTo.value="",inputCloseUsername.value=inputClosePin.value="",alert(`${formatCur(o,currentAccount.locale,currentAccount.currency)} Transferred Succesfully to ${n.owner}`)}),1500):alert("Transfer Invalid")})),btnLoan.addEventListener("click",(e=>{e.preventDefault();const o=Math.floor(inputLoanAmount.value);o>0&&currentAccount.movements.some((e=>e>=.1*o))?(inputLoanAmount.value="",inputCloseUsername.value=inputClosePin.value="",setTimeout((()=>{currentAccount.movements.push(o);const e=new Date;currentAccount.movementsDates.push(e.toISOString()),updateUI(currentAccount),clearInterval(timer),timer=startLogoutTimer(),alert(`Loan granted: ${formatCur(o,currentAccount.locale,currentAccount.currency)}`)}),3e3)):alert(`We cannot grant you a loan of ${formatCur(o,currentAccount.locale,currentAccount.currency)}`)})),btnClose.addEventListener("click",(e=>{e.preventDefault();const o=inputCloseUsername.value,n=+inputClosePin.value;accounts.find((e=>e?.username===o));if(o===currentAccount.username&&n===currentAccount.pin){const e=accounts.findIndex((e=>e.username===currentAccount.username));console.log(e),accounts.splice(e,1),inputLoginUsername.value=inputLoginPin.value="",inputLoginPin.blur(),inputTransferAmount.value=inputTransferTo.value="",inputCloseUsername.value=inputClosePin.value="",inputLoanAmount.value="",containerApp.style.opacity=0,console.log("Deleted User")}else alert("Account not found")}));let sorted=!1;btnSort.addEventListener("click",(e=>{e.preventDefault(),displayMovements(currentAccount,!sorted),sorted=!sorted}));const currencies=new Map([["USD","United States dollar"],["EUR","Euro"],["GBP","Pound sterling"]]),movements=[200,450,-400,3e3,-650,-130,70,1300];console.log("---The new .at method ---");const arrx=[23,1,14];console.log(arrx.at(0)),console.log(arrx.at(-1)),console.log(" "),console.log("--- ForEach method on an Array ---"),console.log(movements),movements.forEach(((e,o,n)=>console.log(`${e>0?"+":"-"} You ${e>0?"deposited":"withdrew"} ${Math.abs(e)} - transaction ${o+1}`))),console.log(" "),console.log("--- ForEach method on a Map ---"),console.log(currencies),currencies.forEach(((e,o,n)=>{console.log(`${o}: ${e}`)})),console.log(" "),console.log("--- ForEach method on a Set ---");const currenciesUnique=new Set(["USD","GDP","USD","EUR","EUR"]);console.log(currenciesUnique),currenciesUnique.forEach(((e,o,n)=>{console.log(`${e}: ${e}`)})),console.log(" "),console.log("--- CODING CHALLENGE #1 ---");const checkDogs=(e,o)=>{const n=e.slice();n.splice(0,1),n.splice(-2);n.concat(o).forEach(((e,o)=>{e>3?console.log(`Dog number ${o+1} is an adult and is ${e} years old`):console.log(`Dog number ${o+1} is still a puppy 🐶`)}))};checkDogs([3,5,2,12,7],[4,1,15,8,3]),console.log(" "),console.log("--- Data Transformation methods: Map ---");const euroToUSD=1.1,movementsUSD=movements.map((e=>1.1*e));console.log(movements),console.log(movementsUSD);const movementsDesc=movements.map(((e,o,n)=>`${e>0?"+":"-"} You ${e>0?"deposited":"withdrew"} ${Math.abs(e)} - transaction ${o+1}`));console.log(movementsDesc),console.log(" "),console.log("--- Data Transformation methods: Filter ---"),console.log(movements);const deposit=movements.filter((e=>e>0));console.log(deposit),console.log(" "),console.log("--- Data Transformation methods: Reduce ---");const balance=movements.reduce(((e,o,n,t)=>(console.log(`Iteration ${n+1}: ${e} ${o<0?"-":"+"} ${Math.abs(o)} = ${e+o}`),e+o)),160);console.log(balance),console.log(movements);const max=movements.reduce(((e,o,n,t)=>e>=o?e:o),movements[0]);console.log(`The maximum number in the array is: ${max}`),console.log(" "),console.log(accounts.flatMap((e=>e.movements)));const numDeposits1000=accounts.flatMap((e=>e.movements)).reduce(((e,o)=>o>=1e3?++e:e),0);console.log(`The number of elements in the array > 1000 is: ${numDeposits1000}`);const{deposits:deposits,withdrawals:withdrawals}=accounts.flatMap((e=>e.movements)).reduce(((e,o)=>(e[o>0?"deposits":"withdrawals"]+=o,e)),{deposits:0,withdrawals:0});console.log(`Total Deposits: ${deposits}€, Total Withdrawals: ${withdrawals}€`),console.log(" "),console.log("--- CODING CHALLENGE #2 ---");const testAgeAlpha=[5,2,4,1,15,8,3],testAgeBeta=[16,6,10,5,6,1,4],calcAverageHumanAge=e=>{const o=e.map((e=>e<=2?2*e:16+4*e));console.log(`Dog age in human age - [${o.join(", ")}]`);const n=o.filter((e=>e>=18));console.log(`Age of adult dogs - [${n.join(", ")}]`);const t=o.filter((e=>e<=18));console.log(`Age of baby dogs - [${t.join(", ")}]`);const a=n.reduce(((e,o,n,t)=>e+o/t.length),0);console.log(`Average age of adult dogs: ${Math.round(a)}`)};console.log(`Test Data Alpha - [${testAgeAlpha.join(", ")}]`),calcAverageHumanAge(testAgeAlpha),console.log(""),console.log(`Test Data Beta - [${testAgeBeta.join(", ")}]`),calcAverageHumanAge(testAgeBeta),console.log(" "),console.log("--- Magic of Chaining Methods ---");const totalDepositsUSD=movements.filter((e=>e>0)).map((e=>1.1*e)).reduce(((e,o)=>e+o),0);console.log(totalDepositsUSD),console.log(" "),console.log("--- Find Method ---");const firstWithdrawl=movements.find((e=>e<0));console.log(movements),console.log(`First negative element in the array: ${firstWithdrawl}`),console.log(accounts);const account=accounts.find((e=>"Jessica Davis"===e.owner));console.log(account),console.log(" "),console.log("--- some Method ---");const anyDeposits=movements.some((e=>e>0));console.log(`Is any element in the array > 0: ${anyDeposits}`),console.log(" "),console.log("--- every Method ---");const everyDeposits=movements.every((e=>e>0));console.log(`Is every element in the array > 0: ${everyDeposits}`),console.log(" "),console.log("--- flat Method ---");const arr=[[1,2,3],[4,5,6],7,8],newArr=arr.flat();console.log(newArr);const arrDeep=[[[1,2],3],[4,[5,6]],7,8],newArrDeep=arrDeep.flat(2),overallBalanceAlpha=accounts.map((e=>e.movements)).flat().reduce(((e,o,n,t)=>e+o),0);console.log(`Overall Balance (Method - array.map().flat().reduce()): ${overallBalanceAlpha}`),console.log(" "),console.log("--- flatMap Method ---");const overallBalanceBeta=accounts.flatMap((e=>e.movements)).reduce(((e,o,n,t)=>e+o),0);console.log(`Overall Balance (Method - array.FlatMap().reduce()): ${overallBalanceBeta}`),console.log(" "),console.log("--- Sorting Arrays ---");const owners=["Jonas","Zach","Adam","Martha"];console.log(`Original Array: [${owners.join(", ")}]`),console.log(`Sorted Array: [${owners.sort().join(", ")}]`),console.log(`Original Array: [${movements.join(", ")}]`),console.log(`Sorted Array: [${movements.sort().join(", ")}]`),console.log(`Original Array: [${movements.join(", ")}]`),console.log(`Sorted Array (Ascending Order): [${movements.sort(((e,o)=>e>o?1:-1)).join(", ")}]`),console.log(`Sorted Array (Descending Order): [${movements.sort(((e,o)=>e>o?-1:1)).join(", ")}]`),console.log(" "),console.log("--- Generating Arrays ---");const x=new Array(7);console.log(x),x.fill(Math.trunc(9*Math.random())+1,0,2),console.log(x),x.fill(Math.trunc(9*Math.random())+1,2,3),console.log(x),x.fill(Math.trunc(9*Math.random())+1,3,5),console.log(x),x.fill(6,5,6),console.log(x),x.fill(7,6),console.log(x),console.log(" ");const y=new Array(9);console.log(y);for(const[e,o]of y.entries())y.fill(Math.trunc(9*Math.random())+1),console.log(`Position ${e+1}, value is : ${o}`);console.log(" ");const z=Array.from({length:5},(()=>Math.trunc(9*Math.random())+1));z.forEach(((e,o,n)=>{console.log(`Position ${o+1}: ${e}`)})),console.log(" ");const ar3=Array.from({length:10},((e,o)=>o+1));console.log(`Generating an Array, containing elements [${ar3.join(", ")}] in an ascending order`),console.log(" "),labelBalance.addEventListener("click",(()=>{const e=Array.from(document.querySelectorAll(".movements__value"),(e=>+e.textContent.replace("€","")));console.log(e)})),console.log(""),console.log("--- Creating a function for creating Title Case ---");const convertTitleCase=e=>{const o=e=>e[0].toUpperCase()+e.slice(1),n=["a","am","an","but","for","in","is","it","of","on","or","the","to","we","who","with"],t=e.toLowerCase().split(" ").map((e=>n.includes(e)?e:o(e))).join(" ");return o(t)},examples=["here is an example of title case","and here we have, another example","one of the best ways a person can eat an apple on a warm day, with peak satisafaction is to drink it in a smoothie","creating a function for creating title case","i am a boy who likes to code but oftens get tired of it"];console.log(`Old sentence: ${examples[0]}`),console.log(`New sentence: ${convertTitleCase(examples[0])}`),console.log(" "),console.log(`Old sentence: ${examples[1]}`),console.log(`New sentence: ${convertTitleCase(examples[1])}`),console.log(" "),console.log(`Old sentence: ${examples[2]}`),console.log(`New sentence: ${convertTitleCase(examples[2])}`),console.log(" "),console.log("--- Coding Challenge #4 --- ");const dogs=[{weight:22,curFood:250,owners:["Alice","Bob"]},{weight:8,curFood:200,owners:["Matilda"]},{weight:13,curFood:275,owners:["Sarah","John"]},{weight:32,curFood:340,owners:["Michael"]}];dogs.forEach((e=>e.recFood=Math.trunc(e.weight**.75*28)));const dogSarah=dogs.find((e=>e.owners.includes("Sarah")));console.log(dogSarah),console.log("Sarah's dog is eating "+(dogSarah.curFood>dogSarah.recFood?"much":"little"));const ownersEatTooMuch=dogs.filter((e=>e.curFood>e.recFood)).flatMap((e=>e.owners));console.log(ownersEatTooMuch);const ownersEatTooLittle=dogs.filter((e=>e.curFood<e.recFood)).flatMap((e=>e.owners));console.log(ownersEatTooLittle),console.log(`${ownersEatTooMuch.join(" and ")}'s dogs eat too much!`),console.log(`[${ownersEatTooLittle.join(" and ")}'s dogs eat too little!`);const eatingExact=dogs.some((e=>e.curFood===e.recFood));console.log(`Is there any dog eating exactly the amount of food that is recommended: ${eatingExact}`);const checkEatingOkay=e=>e.curFood>.9*e.recFood&&e.curFood<1.1*e.recFood,eatingOkay=dogs.some(checkEatingOkay);console.log(`Is there any dog eating an okay amount of food: ${eatingOkay}`);const dogsEatingOkay=dogs.filter(checkEatingOkay);console.log(dogsEatingOkay);const dogCopy=dogs.slice().sort(((e,o)=>e.recFood-o.recFood));console.log(dogCopy);
//# sourceMappingURL=index.92954355.js.map
