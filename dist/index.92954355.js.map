{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// BANKIST APP\n\n// Data\nconst account1 = {\n  owner: 'Nagasaki Yuto',\n  movements: [200, 455.23, -306.5, 25000, -642.21, -133.9, 79.97, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n\n  movementsDates: [\n    '2019-11-18T21:31:17.178Z',\n    '2019-12-23T07:42:02.383Z',\n    '2020-01-28T09:15:04.904Z',\n    '2020-04-01T10:17:24.185Z',\n    '2020-05-08T14:11:59.604Z',\n    '2022-02-22T17:01:17.194Z',\n    '2022-02-20T23:36:17.929Z',\n    '2022-02-17T10:51:36.790Z',\n  ],\n  currency: 'JPY',\n  locale: 'ja-JP', // de-DE\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n\n  movementsDates: [\n    '2019-11-01T13:15:33.035Z',\n    '2019-11-30T09:48:16.867Z',\n    '2019-12-25T06:04:23.907Z',\n    '2020-01-25T14:18:46.235Z',\n    '2020-02-05T16:33:06.386Z',\n    '2020-04-10T14:43:26.374Z',\n    '2020-06-25T18:49:59.371Z',\n    '2020-07-26T12:01:20.894Z',\n  ],\n  currency: 'USD',\n  locale: 'en-US',\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n\n  movementsDates: [\n    '2019-02-01T13:15:33.035Z',\n    '2020-02-30T09:48:16.867Z',\n    '2020-01-25T06:04:23.907Z',\n    '2021-12-25T14:18:46.235Z',\n    '2021-11-05T16:33:06.386Z',\n    '2022-01-17T14:43:26.374Z',\n    '2022-02-20T18:49:59.371Z',\n    '2022-02-21T12:01:20.894Z',\n  ],\n\n  currency: 'GBP',\n  locale: 'en-GB',\n};\n\nconst account4 = {\n  owner: 'Pierre Jean-Luc',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n\n  movementsDates: [\n    '2021-09-01T10:17:24.185Z',\n    '2021-07-08T14:11:59.604Z',\n    '2022-02-15T17:01:17.194Z',\n    '2022-02-20T23:36:17.929Z',\n    '2022-02-17T10:51:36.790Z',\n  ],\n\n  currency: 'EUR',\n  locale: 'fr-FR',\n};\n\nconst accounts = [account1, account2, account3, account4];\n\n// Elements\nconst labelWelcome = document.querySelector('.welcome');\nconst labelDate = document.querySelector('.date');\nconst labelBalance = document.querySelector('.balance__value');\nconst labelSumIn = document.querySelector('.summary__value--in');\nconst labelSumOut = document.querySelector('.summary__value--out');\nconst labelSumInterest = document.querySelector('.summary__value--interest');\nconst labelTimer = document.querySelector('.timer');\n\nconst containerApp = document.querySelector('.app');\nconst containerMovements = document.querySelector('.movements');\n\nconst btnLogin = document.querySelector('.login__btn');\nconst btnTransfer = document.querySelector('.form__btn--transfer');\nconst btnLoan = document.querySelector('.form__btn--loan');\nconst btnClose = document.querySelector('.form__btn--close');\nconst btnSort = document.querySelector('.btn--sort');\n\nconst inputLoginUsername = document.querySelector('.login__input--user');\nconst inputLoginPin = document.querySelector('.login__input--pin');\nconst inputTransferTo = document.querySelector('.form__input--to');\nconst inputTransferAmount = document.querySelector('.form__input--amount');\nconst inputLoanAmount = document.querySelector('.form__input--loan-amount');\nconst inputCloseUsername = document.querySelector('.form__input--user');\nconst inputClosePin = document.querySelector('.form__input--pin');\n\n// TODO\n\n// FUNCTIONS\n\nconst formatMovementDate = (date, locale) => {\n  const calcDaysPassed = (date1, date2) =>\n    Math.round(Math.abs((date2 - date1) / (1000 * 60 * 60 * 24)));\n\n  const daysPassed = calcDaysPassed(new Date(), date);\n  // console.log(daysPassed);\n\n  if (daysPassed === 0) return 'Today';\n  if (daysPassed === 1) return 'Yesterday';\n  if (daysPassed <= 7) return `${daysPassed} days ago`;\n  else return new Intl.DateTimeFormat(locale).format(date);\n};\n\nconst formatCur = (value, locale, currency) => {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n  }).format(value);\n};\n\nconst displayMovements = (currentAccount, sort = false) => {\n  // clear previous content\n  containerMovements.innerHTML = '';\n\n  const movs = sort\n    ? currentAccount.movements.slice().sort((a, b) => a - b)\n    : currentAccount.movements;\n\n  movs.forEach((mov, i) => {\n    const type = mov > 0 ? 'deposit' : 'withdrawal';\n\n    const date = new Date(currentAccount.movementsDates[i]);\n    const displayDate = formatMovementDate(date, currentAccount.locale);\n\n    const formattedMov = formatCur(\n      mov,\n      currentAccount.locale,\n      currentAccount.currency\n    );\n\n    const html = `\n      <div class=\"movements__row\">\n        <div class=\"movements__type movements__type--${type}\">${\n      i + 1\n    } ${type}</div>\n        <div class=\"movements__date\">${displayDate}</div>\n        <div class=\"movements__value\">${formattedMov}</div>\n      </div>\n      `;\n    containerMovements.insertAdjacentHTML('afterbegin', html);\n  });\n};\n\nconst calcDisplayBalance = currentAccount => {\n  currentAccount.balance = currentAccount.movements.reduce(\n    (acc, mov) => acc + mov\n  );\n\n  labelBalance.textContent = formatCur(\n    currentAccount.balance,\n    currentAccount.locale,\n    currentAccount.currency\n  );\n};\n\nconst calcDisplaySummary = currentAccount => {\n  const incomes = currentAccount.movements\n    .filter(mov => mov > 0)\n    .reduce((acc, mov) => acc + mov, 0);\n\n  labelSumIn.textContent = formatCur(\n    incomes,\n    currentAccount.locale,\n    currentAccount.currency\n  );\n\n  const outgoing = currentAccount.movements\n    .filter(mov => mov < 0)\n    .reduce((acc, mov) => acc + mov, 0);\n\n  labelSumOut.textContent = formatCur(\n    Math.abs(outgoing),\n    currentAccount.locale,\n    currentAccount.currency\n  );\n\n  const interest = currentAccount.movements\n    .filter(mov => mov > 0)\n    .map(deposit => deposit * (currentAccount.interestRate / 100))\n    .filter(interest => interest >= 1)\n    .reduce((acc, interest) => acc + interest, 0);\n\n  labelSumInterest.textContent = formatCur(\n    interest,\n    currentAccount.locale,\n    currentAccount.currency\n  );\n};\n\nconst createUsernames = accs => {\n  accs.forEach(acc => {\n    acc.username = acc.owner\n      .toLowerCase()\n      .split(' ')\n      .map((name, i, _) => name.at(0))\n      .join('');\n  });\n\n  console.log(accs);\n};\n\ncreateUsernames(accounts);\n\nconst updateUI = currentAccount => {\n  // Display movements\n  displayMovements(currentAccount);\n\n  // Display balance\n  calcDisplayBalance(currentAccount);\n\n  // Display summary\n  calcDisplaySummary(currentAccount);\n};\n\nconst startLogoutTimer = () => {\n  // set time to 5mins\n  let time = 90;\n\n  const tick = () => {\n    const min = `${Math.trunc(time / 60)}`.padStart(2, 0);\n    const sec = `${time % 60}`.padStart(2, 0);\n\n    // in each funcion call, log the remaining time to the UI\n    labelTimer.textContent = `${min}:${sec}`;\n\n    // when time is at 0 sec, stop timer and log out\n    if (time === 0) {\n      clearInterval(timer);\n      // reset welcome label\n      labelWelcome.textContent = 'Log in to get started';\n      // clear fields\n      inputLoginPin.blur();\n      inputLoginUsername.value = inputLoginPin.value = '';\n      inputTransferAmount.value = inputTransferTo.value = '';\n      inputCloseUsername.value = inputClosePin.value = '';\n      inputLoanAmount.value = '';\n\n      // Hide UI\n      containerApp.style.opacity = 0;\n    }\n\n    // decrease time by 1 sec\n    time--;\n  };\n\n  // call timer every second\n  tick();\n  const timer = setInterval(tick, 1000);\n  return timer;\n};\n\n// Event Handlers\n// LOGIN\n\nlet currentAccount, timer;\n\n// FAKE ALWAYS LOGGED IN\n// currentAccount = account1;\n// updateUI(currentAccount);\n// containerApp.style.opacity = 100;\n//////////////////////////////////////\n\nconst now = new Date();\nlabelDate.textContent = now.toLocaleString();\n\nbtnLogin.addEventListener('click', e => {\n  // prevemt form from dubmitting\n  e.preventDefault();\n\n  currentAccount = accounts.find(\n    acc => acc.username === inputLoginUsername.value\n  );\n\n  // console.log(currentAccount);\n\n  if (currentAccount?.pin === +inputLoginPin.value) {\n    alert(`${currentAccount.owner}, now logged in`);\n    // Display UI and message\n    labelWelcome.textContent = `Welcome back, ${\n      currentAccount.owner.split(' ')[0]\n    }`;\n    containerApp.style.opacity = 100;\n\n    // current date and time\n    const now = new Date();\n    // const locale = navigator.language;\n    const options = {\n      hour: 'numeric',\n      minute: 'numeric',\n      day: 'numeric', // 2-digit\n      // weekday: 'long',\n      month: 'numeric', // long\n      year: 'numeric',\n    };\n    labelDate.textContent = new Intl.DateTimeFormat(\n      currentAccount.locale,\n      options\n    ).format(now);\n    // labelDate.textContent = now.toLocaleString();\n\n    // clear input fields\n    inputLoginUsername.value = inputLoginPin.value = '';\n    inputLoginPin.blur();\n    inputTransferAmount.value = inputTransferTo.value = '';\n    inputCloseUsername.value = inputClosePin.value = '';\n    inputLoanAmount.value = '';\n\n    // Timer\n    if (timer) clearInterval(timer);\n    timer = startLogoutTimer();\n\n    updateUI(currentAccount);\n  } else\n    alert(\n      'User with this login detail does not exist \\n Enter correct username and password'\n    );\n});\n\n// TRANSFER\nbtnTransfer.addEventListener('click', e => {\n  e.preventDefault();\n\n  const amount = +inputTransferAmount.value;\n  const receiverAcc = accounts.find(\n    acc => acc?.username === inputTransferTo.value\n  );\n\n  if (\n    amount > 0 &&\n    receiverAcc &&\n    currentAccount.balance >= amount &&\n    currentAccount.username !== receiverAcc?.username\n  ) {\n    setTimeout(() => {\n      // Doing the transfer\n      currentAccount.movements.push(-amount);\n      receiverAcc.movements.push(amount);\n\n      // adding transfer date\n      currentAccount.movementsDates.push(new Date().toISOString());\n      receiverAcc.movementsDates.push(new Date().toISOString());\n\n      // update UI and clear fields\n      updateUI(currentAccount);\n\n      // clear timer\n      clearInterval(timer);\n      timer = startLogoutTimer();\n\n      // clear fields\n      inputTransferAmount.value = inputTransferTo.value = '';\n      inputCloseUsername.value = inputClosePin.value = '';\n\n      alert(\n        `${formatCur(\n          amount,\n          currentAccount.locale,\n          currentAccount.currency\n        )} Transferred Succesfully to ${receiverAcc.owner}`\n      );\n    }, 1500);\n  } else {\n    alert(`Transfer Invalid`);\n  }\n});\n\n// REQUEST LOAN\nbtnLoan.addEventListener('click', e => {\n  e.preventDefault();\n\n  const amount = Math.floor(inputLoanAmount.value);\n\n  // if the loa amount is greater than 0, and one or more of the deposits is more than 10% of the amount\n  if (amount > 0 && currentAccount.movements.some(mov => mov >= 0.1 * amount)) {\n    inputLoanAmount.value = '';\n    inputCloseUsername.value = inputClosePin.value = '';\n\n    setTimeout(() => {\n      // add movement\n      currentAccount.movements.push(amount);\n\n      // adding loan request date\n      const now = new Date();\n      currentAccount.movementsDates.push(now.toISOString());\n\n      // update UI\n      updateUI(currentAccount);\n\n      // clear timer\n      clearInterval(timer);\n      timer = startLogoutTimer();\n\n      alert(\n        `Loan granted: ${formatCur(\n          amount,\n          currentAccount.locale,\n          currentAccount.currency\n        )}`\n      );\n    }, 3000);\n  } else {\n    alert(\n      `We cannot grant you a loan of ${formatCur(\n        amount,\n        currentAccount.locale,\n        currentAccount.currency\n      )}`\n    );\n  }\n});\n\n// CLOSE ACCOUNT\nbtnClose.addEventListener('click', e => {\n  e.preventDefault();\n\n  const uname = inputCloseUsername.value;\n  const pwd = +inputClosePin.value;\n  const accUname = accounts.find(acc => acc?.username === uname);\n\n  if (uname === currentAccount.username && pwd === currentAccount.pin) {\n    const index = accounts.findIndex(\n      acc => acc.username === currentAccount.username\n    );\n\n    // show index\n    console.log(index);\n\n    // Delete account\n    accounts.splice(index, 1);\n\n    inputLoginUsername.value = inputLoginPin.value = '';\n    inputLoginPin.blur();\n    inputTransferAmount.value = inputTransferTo.value = '';\n    inputCloseUsername.value = inputClosePin.value = '';\n    inputLoanAmount.value = '';\n\n    // Hide UI\n    containerApp.style.opacity = 0;\n\n    console.log('Deleted User');\n  } else {\n    alert('Account not found');\n  }\n});\n\n// SORT VIEW\n\nlet sorted = false;\n\nbtnSort.addEventListener('click', e => {\n  e.preventDefault();\n\n  displayMovements(currentAccount, !sorted);\n  sorted = !sorted;\n});\n\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// LECTURES\n\nconst currencies = new Map([\n  ['USD', 'United States dollar'],\n  ['EUR', 'Euro'],\n  ['GBP', 'Pound sterling'],\n]);\n\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n\n/////////////////////////////////////////////////\n\nconsole.log('---The new .at method ---');\nconst arrx = [23, 1, 14];\nconsole.log(arrx.at(0));\nconsole.log(arrx.at(-1));\n\nconsole.log(' ');\nconsole.log('--- ForEach method on an Array ---');\n\nconsole.log(movements);\n\nmovements.forEach((mov, i, arr) => {\n  return console.log(\n    `${mov > 0 ? '+' : '-'} You ${\n      mov > 0 ? 'deposited' : 'withdrew'\n    } ${Math.abs(mov)} - transaction ${i + 1}`\n  );\n  if (mov > 0) {\n    console.log(`+ You deposited $${mov} - transaction ${i + 1}`);\n  } else {\n    console.log(`- You withdrew $${Math.abs(mov)} - transaction ${i + 1}`);\n  }\n});\n\nconsole.log(' ');\nconsole.log('--- ForEach method on a Map ---');\n\nconsole.log(currencies);\n\ncurrencies.forEach((value, key, map) => {\n  console.log(`${key}: ${value}`);\n});\n\nconsole.log(' ');\nconsole.log('--- ForEach method on a Set ---');\n\nconst currenciesUnique = new Set(['USD', 'GDP', 'USD', 'EUR', 'EUR']);\nconsole.log(currenciesUnique);\n\ncurrenciesUnique.forEach((value, _, set) => {\n  console.log(`${value}: ${value}`);\n});\n\n// CODING CHALLENGE #1\nconsole.log(' ');\nconsole.log('--- CODING CHALLENGE #1 ---');\n\nconst checkDogs = (dogsJulia, dogsKate) => {\n  const dogsJuliaCorrected = dogsJulia.slice();\n  dogsJuliaCorrected.splice(0, 1);\n  dogsJuliaCorrected.splice(-2);\n\n  const dogs = dogsJuliaCorrected.concat(dogsKate);\n  dogs.forEach((dog, i) => {\n    dog > 3\n      ? console.log(`Dog number ${i + 1} is an adult and is ${dog} years old`)\n      : console.log(`Dog number ${i + 1} is still a puppy 🐶`);\n  });\n};\n\ncheckDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]);\n\n// Data Transformation methods: map, filter, reduce\nconsole.log(' ');\nconsole.log('--- Data Transformation methods: Map ---');\n\nconst euroToUSD = 1.1;\n\nconst movementsUSD = movements.map(mov => mov * euroToUSD);\n\n// movements.push(6000);\nconsole.log(movements);\nconsole.log(movementsUSD);\n\nconst movementsDesc = movements.map(\n  (mov, i, _) =>\n    `${mov > 0 ? '+' : '-'} You ${\n      mov > 0 ? 'deposited' : 'withdrew'\n    } ${Math.abs(mov)} - transaction ${i + 1}`\n);\n\nconsole.log(movementsDesc);\n\nconsole.log(' ');\nconsole.log('--- Data Transformation methods: Filter ---');\n\nconsole.log(movements);\nconst deposit = movements.filter(mov => {\n  return mov > 0;\n  return mov > 0 ? mov : '';\n});\nconsole.log(deposit);\n\nconsole.log(' ');\nconsole.log('--- Data Transformation methods: Reduce ---');\n\n// reduce method takes two args (callback function, original value of the accumulator)\n// callback function takes 4 args (accumulator, currentElement, index, array)\n// accumulator represents what the array boils down to\nconst balance = movements.reduce((accumulator, cur, i, arr) => {\n  console.log(\n    `Iteration ${i + 1}: ${accumulator} ${cur < 0 ? '-' : '+'} ${Math.abs(\n      cur\n    )} = ${accumulator + cur}`\n  );\n  return accumulator + cur;\n}, 160);\nconsole.log(balance);\n\n//getting maximum value with reduce method\n// movements.push(13500);\nconsole.log(movements);\n\nconst max = movements.reduce(\n  (acc, cur, i, arr) => (acc = acc >= cur ? acc : cur),\n  movements[0]\n);\n\nconsole.log(`The maximum number in the array is: ${max}`);\n\n// using reduce to count the number of elements in the array > 1000\nconsole.log(' ');\nconsole.log(accounts.flatMap(acc => acc.movements));\nconst numDeposits1000 = accounts\n  .flatMap(acc => acc.movements)\n  .reduce((count, cur) => (cur >= 1000 ? ++count : count), 0);\n\nconsole.log(\n  `The number of elements in the array > 1000 is: ${numDeposits1000}`\n);\n\n// using reduce to return an object as the value\nconst { deposits, withdrawals } = accounts\n  .flatMap(acc => acc.movements)\n  .reduce(\n    (sums, cur) => {\n      sums[cur > 0 ? 'deposits' : 'withdrawals'] += cur;\n      // cur > 0 ? (sums.deposits += cur) : (sums.withdrawals += cur);\n      return sums;\n    },\n    { deposits: 0, withdrawals: 0 }\n  );\n\nconsole.log(`Total Deposits: ${deposits}€, Total Withdrawals: ${withdrawals}€`);\n\n// CODING CHALLENGE #2\nconsole.log(' ');\nconsole.log('--- CODING CHALLENGE #2 ---');\n\nconst testAgeAlpha = [5, 2, 4, 1, 15, 8, 3];\nconst testAgeBeta = [16, 6, 10, 5, 6, 1, 4];\n\nconst calcAverageHumanAge = ages => {\n  const humanAges = ages.map(age => (age <= 2 ? 2 * age : 16 + age * 4));\n  console.log(`Dog age in human age - [${humanAges.join(', ')}]`);\n\n  const adultDogs = humanAges.filter(age => age >= 18);\n  console.log(`Age of adult dogs - [${adultDogs.join(', ')}]`);\n\n  const babyDogs = humanAges.filter(age => age <= 18);\n  console.log(`Age of baby dogs - [${babyDogs.join(', ')}]`);\n\n  const average = adultDogs.reduce(\n    (acc, age, i, arr) => acc + age / arr.length,\n    0\n  );\n  console.log(`Average age of adult dogs: ${Math.round(average)}`);\n};\n\nconsole.log(`Test Data Alpha - [${testAgeAlpha.join(', ')}]`);\ncalcAverageHumanAge(testAgeAlpha);\n\nconsole.log('');\n\nconsole.log(`Test Data Beta - [${testAgeBeta.join(', ')}]`);\ncalcAverageHumanAge(testAgeBeta);\n\nconsole.log(' ');\nconsole.log('--- Magic of Chaining Methods ---');\n\n// Pipeline\nconst totalDepositsUSD = movements\n  .filter(mov => mov > 0)\n  .map(mov => mov * euroToUSD)\n  .reduce((acc, mov) => acc + mov, 0);\n\nconsole.log(totalDepositsUSD);\n\nconsole.log(' ');\nconsole.log('--- Find Method ---');\n\nconst firstWithdrawl = movements.find(mov => mov < 0);\nconsole.log(movements);\nconsole.log(`First negative element in the array: ${firstWithdrawl}`);\n\nconsole.log(accounts);\n\nconst account = accounts.find(acc => acc.owner === 'Jessica Davis');\nconsole.log(account);\n\nconsole.log(' ');\nconsole.log('--- some Method ---');\n\nconst anyDeposits = movements.some(mov => mov > 0);\nconsole.log(`Is any element in the array > 0: ${anyDeposits}`);\n\nconsole.log(' ');\nconsole.log('--- every Method ---');\n\nconst everyDeposits = movements.every(mov => mov > 0);\nconsole.log(`Is every element in the array > 0: ${everyDeposits}`);\n\nconsole.log(' ');\nconsole.log('--- flat Method ---');\n\nconst arr = [[1, 2, 3], [4, 5, 6], 7, 8];\nconst newArr = arr.flat(); // only goes one-level deep when flatening arrays, unless you specify level of depth as arg\nconsole.log(newArr);\n\nconst arrDeep = [[[1, 2], 3], [4, [5, 6]], 7, 8];\nconst newArrDeep = arrDeep.flat(2);\n\n// calculate the average or total balance of all the clients\nconst overallBalanceAlpha = accounts\n  .map(acc => acc.movements)\n  .flat()\n  .reduce((acc, cur, i, _) => acc + cur, 0);\n\nconsole.log(\n  `Overall Balance (Method - array.map().flat().reduce()): ${overallBalanceAlpha}`\n);\n\nconsole.log(' ');\nconsole.log('--- flatMap Method ---');\n\n// flatMap combines both the flat and map method of an array\n// flatMap only goes one level deep\nconst overallBalanceBeta = accounts\n  .flatMap(acc => acc.movements)\n  .reduce((acc, cur, i, _) => acc + cur, 0);\n\nconsole.log(\n  `Overall Balance (Method - array.FlatMap().reduce()): ${overallBalanceBeta}`\n);\n\nconsole.log(' ');\nconsole.log('--- Sorting Arrays ---');\n\nconst owners = ['Jonas', 'Zach', 'Adam', 'Martha'];\nconsole.log(`Original Array: [${owners.join(', ')}]`);\nconsole.log(`Sorted Array: [${owners.sort().join(', ')}]`); // it mutates the array\n\nconsole.log(`Original Array: [${movements.join(', ')}]`);\nconsole.log(`Sorted Array: [${movements.sort().join(', ')}]`); // .sort() workd based on strings\n\nconsole.log(`Original Array: [${movements.join(', ')}]`);\n\n// sorting in ascending order; return 1 if currentValue > nextValue and return -1 if a < b\nconsole.log(\n  `Sorted Array (Ascending Order): [${movements\n    .sort((currentValue, nextValue) => (currentValue > nextValue ? 1 : -1))\n    .join(', ')}]` // return 1 = swap(currentValue, nextValue) || return -1 = noSwap(currentValue, nextValue)\n);\n\n// or\n// movements.sort((a, b) => a - b);\n\n// sorting in descending order; return -1 if currentValue > nextValue and return 1 if a < b\nconsole.log(\n  `Sorted Array (Descending Order): [${movements\n    .sort((currentValue, nextValue) => (currentValue > nextValue ? -1 : 1))\n    .join(', ')}]` // return 1 = swap(currentValue, nextValue) || return -1 = noSwap(currentValue, nextValue)\n);\n\n// or\n// movements.sort((a, b) => b - a);\n\nconsole.log(' ');\nconsole.log('--- Generating Arrays ---');\n\nconst x = new Array(7);\nconsole.log(x);\n\n// Filling array x\nx.fill(Math.trunc(Math.random() * 9) + 1, 0, 2); // fill the array with a random number (0-9) from index 0 - 1 (positing 1 - 2)\nconsole.log(x);\n\nx.fill(Math.trunc(Math.random() * 9) + 1, 2, 3); // fill the array with a random number (0-9) from index 2 - 2 ( at positing 3)\nconsole.log(x);\n\nx.fill(Math.trunc(Math.random() * 9) + 1, 3, 5); // fill the array with a random number (0-9) from position 4 - 5\nconsole.log(x);\n\nx.fill(6, 5, 6); // fill the array with the number 6 at position 6\nconsole.log(x);\n\nx.fill(7, 6); // fill the array with the number 7 at position 7\nconsole.log(x);\n\nconsole.log(' ');\n\nconst y = new Array(9);\nconsole.log(y);\n\nfor (const [i, value] of y.entries()) {\n  y.fill(Math.trunc(Math.random() * 9) + 1);\n  console.log(`Position ${i + 1}, value is : ${value}`);\n}\n\nconsole.log(' ');\n\nconst z = Array.from({ length: 5 }, () => Math.trunc(Math.random() * 9) + 1);\n\nz.forEach((val, i, _) => {\n  console.log(`Position ${i + 1}: ${val}`);\n});\n\nconsole.log(' ');\n\n// generating an array containing elements from 1 - 10 (in that order)\nconst ar3 = Array.from({ length: 10 }, (_, i) => i + 1);\nconsole.log(\n  `Generating an Array, containing elements [${ar3.join(\n    ', '\n  )}] in an ascending order`\n);\n\nconsole.log(' ');\n\nlabelBalance.addEventListener('click', () => {\n  const movementsUI = Array.from(\n    document.querySelectorAll('.movements__value'),\n    el => +el.textContent.replace('€', '')\n  );\n  console.log(movementsUI);\n\n  // OR USE THE SPREAD OPERATOR - to turn the NodeList into an array\n  // const movementsUI = [...document.querySelectorAll('movements__value')];\n  // console.log(movementsUI);\n});\n\nconsole.log('');\nconsole.log('--- Creating a function for creating Title Case ---');\n\nconst convertTitleCase = title => {\n  const capitalize = str => str[0].toUpperCase() + str.slice(1);\n\n  const excecptions = [\n    'a',\n    'am',\n    'an',\n    'but',\n    'for',\n    'in',\n    'is',\n    'it',\n    'of',\n    'on',\n    'or',\n    'the',\n    'to',\n    'we',\n    'who',\n    'with',\n  ];\n\n  const titleCase = title\n    .toLowerCase()\n    .split(' ')\n    .map(word => (!excecptions.includes(word) ? capitalize(word) : word))\n    .join(' ');\n\n  return capitalize(titleCase);\n};\n\nconst examples = [\n  'here is an example of title case',\n  'and here we have, another example',\n  'one of the best ways a person can eat an apple on a warm day, with peak satisafaction is to drink it in a smoothie',\n  'creating a function for creating title case',\n  'i am a boy who likes to code but oftens get tired of it',\n];\n\nconsole.log(`Old sentence: ${examples[0]}`);\nconsole.log(`New sentence: ${convertTitleCase(examples[0])}`);\n\nconsole.log(' ');\n\nconsole.log(`Old sentence: ${examples[1]}`);\nconsole.log(`New sentence: ${convertTitleCase(examples[1])}`);\n\nconsole.log(' ');\n\nconsole.log(`Old sentence: ${examples[2]}`);\nconsole.log(`New sentence: ${convertTitleCase(examples[2])}`);\n\nconsole.log(' ');\n// coding challenge #4\nconsole.log('--- Coding Challenge #4 --- ');\n\nconst dogs = [\n  { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },\n  { weight: 8, curFood: 200, owners: ['Matilda'] },\n  { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },\n  { weight: 32, curFood: 340, owners: ['Michael'] },\n];\n\n// 1. - Loop over the 'dogs' array containing dog objects, and for each dog, calculate the recommended food portion and add it to the object as a new property. Do not create a new array, simply loop over the array.\ndogs.forEach(dog => (dog.recFood = Math.trunc(dog.weight ** 0.75 * 28)));\n\n// 2. Find Sarah's dog and log to the console whether it's eating too much or too little.\nconst dogSarah = dogs.find(dog => dog.owners.includes('Sarah'));\nconsole.log(dogSarah);\nconsole.log(\n  `Sarah's dog is eating ${\n    dogSarah.curFood > dogSarah.recFood ? 'much' : 'little'\n  }`\n);\n\n// 3. Create an array containing all owners of dogs who eat too much('ownersEatTooMuch') and an array with all owners of dogs who eat too little ('ownersEatTooLittle').\nconst ownersEatTooMuch = dogs\n  .filter(dog => dog.curFood > dog.recFood)\n  .flatMap(dog => dog.owners);\n\nconsole.log(ownersEatTooMuch);\n\nconst ownersEatTooLittle = dogs\n  .filter(dog => dog.curFood < dog.recFood)\n  .flatMap(dog => dog.owners);\n\nconsole.log(ownersEatTooLittle);\n\n// 4. Log a string to the console for each array created in 3., like this: \"Matilda and Alice and Bob's dogs eat too much!\" and \"Sarah and John and Michael's dogs eat too little!\".\nconsole.log(`${ownersEatTooMuch.join(' and ')}'s dogs eat too much!`);\n\nconsole.log(`[${ownersEatTooLittle.join(' and ')}'s dogs eat too little!`);\n\n// 5. Log to the console whether there is any dog eating exactly the amount of food that is recommended (just true or false)\nconst eatingExact = dogs.some(dog => dog.curFood === dog.recFood);\nconsole.log(\n  `Is there any dog eating exactly the amount of food that is recommended: ${eatingExact}`\n);\n\n// 6. Log to the console whether there is any dog eating an okay amount of food (just true or false)\nconst checkEatingOkay = dog =>\n  dog.curFood > dog.recFood * 0.9 && dog.curFood < dog.recFood * 1.1;\n\nconst eatingOkay = dogs.some(checkEatingOkay);\nconsole.log(`Is there any dog eating an okay amount of food: ${eatingOkay}`);\n\n// 7. Create an array containing the dogs that are eating an okay amount of food (try to reuse the condition used in 6.)\n\nconst dogsEatingOkay = dogs.filter(checkEatingOkay);\nconsole.log(dogsEatingOkay);\n\n// 8. Create a shallow copy of the 'dogs' array and sort it by recommended food portion in an ascending order (keep in mind that the portions are inside the array's objects 😉)\nconst dogCopy = dogs.slice().sort((a, b) => a.recFood - b.recFood);\nconsole.log(dogCopy);\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n"],"names":["account1","owner","movements","interestRate","pin","movementsDates","currency","locale","account2","account3","account4","accounts","labelWelcome","document","querySelector","labelDate","labelBalance","labelSumIn","labelSumOut","labelSumInterest","labelTimer","containerApp","containerMovements","btnLogin","btnTransfer","btnLoan","btnClose","btnSort","inputLoginUsername","inputLoginPin","inputTransferTo","inputTransferAmount","inputLoanAmount","inputCloseUsername","inputClosePin","formatMovementDate","date","daysPassed","date1","Date","date2","Math","round","abs","Intl","DateTimeFormat","format","formatCur","value1","NumberFormat","style","displayMovements","currentAccount1","sort","innerHTML","slice","a","b","forEach","mov","i1","type","html","insertAdjacentHTML","calcDisplayBalance","currentAccount2","balance","reduce","acc","textContent","calcDisplaySummary","currentAccount3","incomes","filter","outgoing","interest1","map","deposit1","interest","createUsernames","accs","username","toLowerCase","split","name","i","_","at","join","console","log","updateUI","currentAccount4","startLogoutTimer","time","tick","min","trunc","padStart","sec","clearInterval","timer1","blur","value","opacity","setInterval","currentAccount","timer","now","toLocaleString","addEventListener","e","preventDefault","find","alert","now1","options","hour","minute","day","month","year","amount","receiverAcc","setTimeout","push","toISOString","floor","some","now2","uname","pwd","index","findIndex","splice","sorted","currencies","Map","arrx","i2","arr","value2","key","currenciesUnique","Set","value3","set","checkDogs","dogsJulia","dogsKate","dogsJuliaCorrected","concat","dog","i3","euroToUSD","movementsUSD","movementsDesc","i4","deposit","accumulator","cur","i5","max","flatMap","numDeposits1000","count","deposits","withdrawals","sums","testAgeAlpha","testAgeBeta","calcAverageHumanAge","ages","humanAges","age","adultDogs","babyDogs","average","arr1","length","totalDepositsUSD","firstWithdrawl","account","anyDeposits","everyDeposits","every","newArr","flat","arrDeep","newArrDeep","overallBalanceAlpha","overallBalanceBeta","owners","currentValue","nextValue","x","Array","fill","random","y","entries","z","from","val","i6","ar3","i7","movementsUI","querySelectorAll","el","replace","convertTitleCase","title","capitalize","str","toUpperCase","excecptions","titleCase","word","includes","examples","dogs","weight","curFood","recFood","dogSarah","ownersEatTooMuch","ownersEatTooLittle","eatingExact","checkEatingOkay","eatingOkay","dogsEatingOkay","dogCopy"],"version":3,"file":"index.92954355.js.map"}